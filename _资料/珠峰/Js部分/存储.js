/*
 服务器存储
   + 数据库存储：mysql、sql server、oracle、mongodb「node.js」...
   + session会话存储
   + redis存储
   + ...

 客户端本地存储
   意义：把一些信息存储到客户端本地，后期需要用这些信息的时候，直接从本地获取即可！！
   特殊：
     + 存储的信息都是以“明文”形式进行存储「控制台->Application->Storage」，所以不要存储“敏感”信息「非要存储，则一定要记得加密！！」
     + 存在浏览器和域的限制
       + 浏览器限制：在IE浏览器中存储的东西，在谷歌中获取不到！！
       + 域的限制：百度网站存储的东西，京东获取不到！！
   -----
   存储到物理内存「硬盘」中的
   + cookie
     document.cookie「一般我们都是基于一些插件操作cookie」
     + 存储的大小限制：同一个域下，最多只允许存储4KB「所以不要用cookie存储太多信息」
     + 存储周期的限制：设置cookie的时候，需要指定过期时间，到期后浏览器会清除~~
     + 稳定性比较差：基于安全卫士（或者浏览器清除历史记录），可能会干掉没有过期的cookie信息
     + 无痕浏览（或者隐私）模式，是存储不上cookie信息的！！
     + cookie和服务器之间是有“猫腻儿”的：只要客户端存储了cookie，以后每一次向服务器发送请求，不管服务器需不需要这些信息，都要在“请求头”中基于Cookies字段，把信息传递给服务器「自动的行为，但是跨域请求除外」！！

   + localStorage
     localStorage.setItem(key,value)/localStorage.getItem(key)/localStorage.removeItem(key)/localStorage.clear()...
     存储到本地的信息都是字符串格式！！
     + 存储的大小限制：同一个域下，最多只允许存储5MB
     + 存储周期的限制：无限制，持久化存储「只要不自己手动删除，一直存储着」
     + 稳定性非常好，而且也不受无痕浏览的限制！！
     + 和服务器没关系，不会自动给服务器传递啥，需要传递啥，得自己写代码！！！
     ===>真实项目中，优先推荐使用localStorage！！

   + sessionStorage
     语法等和localStorage几乎一样，唯一的区别是：
       + localStorage：持久化存储，页面刷新/关闭，存储的信息都在
       + sessionStorage：会话存储，页面刷新，存储的信息在，但是页面关闭（属于会话结束），存储的sessionStorage信息都会自动释放掉！！！
   + 浏览器数据库存储：IndexedDB、WebSQL「不常用」

   存储到虚拟内存「内存条:堆栈内存」中的：页面只要一刷新「或者关闭」，存储的信息都释放掉了，因为所有堆栈内存都释放了！！
   + 全局变量
   + vuex/redux

   扩展：字节面试题 “手动实现一个具备有效期的localStorage”
     + 设置的时候记录存储的日期
     + 获取的时候，拿当前日期和之前存储的日期做比较，判断是否过期了
       + 没过期：正常获取
       + 过期：移除掉，返回null
 */