react_basic==>

react_basic-->基础( 使用HTML模板运行react环境 引入的依赖有react(react核心库)、react-dom(支持react操作dom)、babel(用于将jsx转换为js) )

04_jsx的小练习- jsx语法中使用 | js语句(代码) | js表达式

函数组件和类组件 https://www.jb51.net/article/245557.htm

07_组件实例三大属性2_props:  类组件  |  对props传值进行限制( Person.propTypes={} )   |   对props的简写方式( static propTypes={})

07_组件实例三大属性2_props:  函数组件   function Person (props){ const {name, age} = props }   |   Person.propTypes={} 

08_组件实例三大属性3_refs:   监听input输入框的值   |  字符串形式、回调函数形式、createRef形式

10_react中收集表单数据:      提交表单   |   1.输入框非受控-通过回调函数形式this.username   |   2.输入框受控-通过改变this.state的值来收集数据

11_高阶函数_函数柯里化:      高阶函数-函数的柯里化：通过函数调用继续返回函数的方式，实现多次接收参数最后统一处理的函数编码形式。
    柯里化实现(函数)：用户名：<input onChange={this.saveFormData('username')} type="text" name="username"/>
                saveFormData = (dataType)=>{return (event)=>{this.setState({[dataType]: event.target.value})}}
    不用柯里化(回调函数)：用户名：<input onChange={event => this.saveFormData('username', event) } type="text" name="username"/>
                saveFormData = (dataType, event)=>{this.setState({[dataType]: event.target.value})}

慢动作回放----使用id唯一标识作为key

复习：1.类的基本知识、2.原生事件绑定、3.类方法中的this指向、4.展开运算符、5.对象相关的知识、6.函数柯里化







react_extension==>

setState:   1.this.setState有两个参数( {count: count}, ()=>{ console.log(count) })    
            2.函数式的setState ( (state) => ({ count: state.count+1 }))

路由懒加载： 1.<NavLink className="list-group-item" to="/about">About</NavLink>   <NavLink className="list-group-item" to="/home">Home</NavLink> 
            2.<Suspense fallback={<Loading />}><Route path="/about" component={About}/><Route path="/home" component={Home}/></Suspense>
								
Hooks:      React.useState(0)、 React.useRef()、 React.useEffect(()=>{}, [])

Context:    const MyContext = React.createContext();       const {Provider,Consumer} = MyContext;
            1.<Provider />和<Consumer />     
            2.static contextType = MyContext;    const {username,age} = this.context  

纯组件: <PureComponent /> 

renderProps class Person{  <A render={(name)=><C name={name}/>}/> }     class A { <div className="a">{this.props.render(name)}</div> }







react_staging==>

TODOS案例:  1.功能-Reactjs-父子组件传值
            2.map、filter的使用
            3.nanoid主键ID
            4.已完成/全部(选择框)???

配置代理：   使用http-proxy-middleware模块 | 遇见/api1或者/api2前缀的请求，就会触发该代理配置  发送给目标的ip和port

github搜索案例(axios)：  1.Search组件来根据输入框的关键词发请求获取数据传递给父组件的state     2.List组件渲染state的值

github搜索案例(publish)： 1.PubSub.publish('atguigu',{isLoading:false,users:response.data.items})
                         2.this.token = PubSub.subscribe('atguigu',(_,stateObj)=>{this.setState(stateObj)})

github搜索案例(fetch):   1.const response= await fetch(`/api1/search/users2?q=${keyWord}`)
			            2.const data = await response.json()

路由的使用：    <Link />   <Suspense />   <NavLink />   <Switch />   exact属性   <Redirect />

嵌套路由：      一级路由：<Routepath="/home" component={Home}/>      二级路由：<Route path="/home/message" component={Message}/>、

!向路由组件传递params参数： 

!向路由组件传递search参数：

!向路由组件传递state参数:  

19_src_push与replace模式

20_src_编程式路由导航:?

withRouter组件

使用Antd组件










Redux==>

参考第二课：   精简版 getState、dispatch

异步action版本： //原函数：  store.dispatch(createIncrementAsyncAction(value*1, 500)) 
                //异步action，就是指action的值为函数,异步action中一般都会调用同步action，异步action不是必须要用的。
                export const createIncrementAsyncAction = (data,time) => {
                    return (disp)=>{
                        // console.log('dis', disp) //ƒ dispatch() { }
                        setTimeout(()=>{
                            disp(createIncrementAction(data))
                            // disp({type: 'increment', data})
                        },time)
                    }
                }   
                export default createStore(countReducer,applyMiddleware(thunk))


React-Redux的基本使用：
    /* 
        1.mapStateToProps函数返回的是一个对象；
        2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value
        3.mapStateToProps用于传递状态
    */
    function mapStateToProps(state) {
        return { count: state } //this.state 用于储存/获取值
    }

    /* 
        1.mapDispatchToProps函数返回的是一个对象；
        2.返回的对象中的key就作为传递给UI组件props的key,value就作为传递给UI组件props的value
        3.mapDispatchToProps用于传递操作状态的方法
    */
    function mapDispatchToProps(dispatch) {
        return {
            jia: number => dispatch(createIncrementAction(number)),//加
            jian: number => dispatch(createDecrementAction(number)),//减
            jiaAsync: (number, time) => dispatch(createIncrementAsyncAction(number, time)),//异步加
        }
    }

    //使用connect()()创建并暴露一个Count的容器组件
    export default connect(mapStateToProps, mapDispatchToProps)(CountUI)


React-Redux数据共享版

    //汇总所有的reducer变为一个总的reducer
    export default  combineReducers({
        count,
        persons
    })

    Countjsx
    //使用connect()()创建并暴露一个Count的容器组件
    export default connect(
        state => ({
            count: state.count,
            personCount: state.persons.length
        }),//映射状态
        { increment, decrement, incrementAsync }//映射操作状态的方法
    )(Count)

    Personjsx
    export default connect(
        state => ({
            persons:state.persons,
            count:state.count
        }),//映射状态
        {addPerson}//映射操作状态的方法
    )(Person)
