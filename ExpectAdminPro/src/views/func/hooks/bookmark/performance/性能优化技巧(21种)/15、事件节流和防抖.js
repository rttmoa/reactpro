



// 15. 事件节流和防抖

// 事件节流和防抖
// 节流（throttling）和防抖（debouncing）可用来限制在指定时间内调用的事件处理程序的数量。
// 事件处理程序是响应不同事件（如鼠标单击和页面滚动）而调用的函数。事件触发事件处理程序的速率是不一样的。

    // 节流的概念
    // 节流意味着延迟函数执行。

    // 这些函数不会立即执行，在触发事件之前会加上几毫秒延迟。

    // 比如在页面滚动时，我们不会过于频繁地触发滚动事件，而是将事件延迟一段时间以便将多个事件堆叠在一起。

    // 它确保函数在特定时间段内至少调用一次。如果函数最近运行过了，它将阻止函数运行，确保函数以固定间隔定期运行。

    // 当我们处理无限滚动并且当用户接近页面底部必须获取数据时，我们可以使用节流。

    // 否则滚动到页面底部将触发多个事件，并且触发对网络的多次调用，从而导致性能问题。




    // 防抖的概念
    // 防抖是指在调用停止一段时间之前忽略事件处理程序调用。

    // 假设我们有一个事件，有一秒钟的 debounce 时间。一旦用户停止触发事件，该事件的事件处理程序将在一秒钟后触发。
    // 典型的例子是用户在自动填充搜索框中键入数据。

    // 一旦用户停止键入，就会进行 AJAX 查询以从 API 获取数据。每次键入都进行 AJAX 调用就需要多次查询数据库。

    // 因此，我们对该事件做 debounce，直到用户不再输入数据为止，从而减少网络调用并提升性能